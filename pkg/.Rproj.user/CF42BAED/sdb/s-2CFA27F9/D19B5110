{
    "contents" : "##' Class \\code{\"AceEstimate\"}\n##' \n##' A class containing information about a single univariate ACE model.\n##' \n##' \n##' @name AceEstimate-class\n##' @aliases AceEstimate-class getEstimate,AceEstimate-method\n##' initialize,AceEstimate-method print,AceEstimate-method\n##' show,AceEstimate-method GetDetails,AceEstimate-method\n##' @docType class\n\n##' @note The contents of the \\code{Details} list depends on the underlying\n##' estimation routine.  For example, when the ACE model is estimated with a DF\n##' analysis, the output is an \\code{lm} object, because the \\code{lm} function\n##' was used (ie, the basical general linear model).  Alternatively, if the\n##' user specified the \\code{lavaan} package should estimate that ACE model,\n##' the output is a \\code{lavaan} object.\n##' @section Objects from the Class: Objects can be created by calls of the\n##' form:\n##' \n##' \\code{new(\"AceEstimate\", aSquared, cSquared, eSquared, caseCount, unity,\n##' withinBounds, details, ...)}\n##' @keywords classes ACE\n##' @examples\n##' \n##' library(NlsyLinks) #Load the package into the current R session.\n##' \n##' showClass(\"AceEstimate\")\n##' est <- CreateAceEstimate(.5, .2, .3, 40)\n##' est \n##' print(est)\nmethods::setClass(Class=\"AceEstimate\", \n  representation=representation(\n    ASquared =\"numeric\",\n    CSquared =\"numeric\",\n    ESquared =\"numeric\", #, CategoryStats=\"matrix\"\n    CaseCount=\"numeric\",\n    #CaseCount=\"integer\",\n    Unity=\"logical\", \n    WithinBounds=\"logical\",\n    Details=\"list\"\n  ),\n  validity=function( object ) { \n    #print( object@ASquared )\n    return( TRUE ) \n  }\n)\n\nmethods::setMethod( f=\"initialize\", \n  signature=signature(.Object = \"AceEstimate\"), # signature=\"AceEstimate\",\n  definition=function(.Object, aSquared, cSquared, eSquared, caseCount, unity, withinBounds, details, ...) {\n    if( missing(eSquared) ) eSquared <- 1 - (aSquared + cSquared)    \n    #print(missing(caseCount))\n    #if( is.na(caseCount) ) caseCount <- 444\n    #print(caseCount)\n    .Object@ASquared <- aSquared\n    .Object@CSquared <- cSquared\n    .Object@ESquared <- eSquared\n    .Object@CaseCount <- caseCount\n    .Object@Unity <- unity\n    .Object@WithinBounds <- withinBounds\n    .Object@Details <- details\n    return( .Object )\n    #callNextMethod(.Object, ASquared=aSquared, CSquared=cSquared, ESquared=eSquared, CaseCount=caseCount, Unity=unity, WithinBounds=withinBounds,...)\n  }\n)\n\n\n\n\nCreateAceEstimate <- function( aSquared, cSquared, eSquared, caseCount, details=list(), unityTolerance=1e-11 ) {\n  componentSum <- aSquared + cSquared + eSquared\n  #print(class(caseCount))\n  if( missing(caseCount) ) stop(\"The argument 'caseCount' is missing.\")\n  #else if( class(caseCount) != \"numeric\" ) stop(paste(\"The argument 'caseCount' should be class 'numeric', but was '\", class(caseCount), \"'.\", sep=\"\"))\n  \n  unity <- ( abs(componentSum - 1.0) < unityTolerance )\n  withinBounds <- (0 <= min(aSquared, cSquared, eSquared)) && (max( aSquared, cSquared, eSquared) <= 1)\n  return( new(\"AceEstimate\", aSquared, cSquared, eSquared, caseCount, unity, withinBounds, details) )  \n}\n\nmethods::setMethod(f=\"print\", \"AceEstimate\", function( x, ... ) {\n  #print(\"ACE Estimates: [print]\")#\\n\")\n  #aceDisplay <- matrix(c(\"ASquared\", \"CSquared\", \"ESquared\", slot(x, \"ASquared\"), slot(x, \"CSquared\"), slot(x, \"ESquared\")), byrow=T, nrow=2)\n  #cat(aceDisplay, \"\\n\")\n  #print(aceDisplay)\n  #print(c(ASquared=slot(x, \"ASquared\"), CSquared=slot(x, \"CSquared\"), ESquared=slot(x, \"ESquared\"), CaseCount=slot(x,\"CaseCount\")))\n  #print(c(a=33, d=43))\n  cat(\"Results of ACE estimation: [print]\\n\",\n      c(ASquared=slot(x, \"ASquared\"), CSquared=slot(x, \"CSquared\"), ESquared=slot(x, \"ESquared\"), CaseCount=slot(x,\"CaseCount\")))\n})\n\nmethods::setMethod(f=\"show\", \"AceEstimate\", function( object ) {\n  print(\"Results of ACE estimation: [show]\")#\\n\")\n  #print(c(GetEstimate(object), CaseCount=slot(object, \"CaseCount\")))\n  print(c(ASquared=slot(object, \"ASquared\"), CSquared=slot(object, \"CSquared\"), ESquared=slot(object, \"ESquared\"), CaseCount=round(slot(object,\"CaseCount\"))))\n  #cat(c(ASquared=slot(object, \"ASquared\"), CSquared=slot(object, \"CSquared\"), ESquared=slot(object, \"ESquared\"), CaseCount=round(slot(object,\"CaseCount\"))))\n})\n\nmethods::setGeneric(\"GetDetails\", function( object ) { standardGeneric(\"GetDetails\") })\n\n#' @name GetDetails-methods\n#' @aliases GetDetails-methods GetDetails AceEstimate-method\n#' @export GetDetails\n#' @exportMethod GetDetails\n#' @docType methods\n#' @title A generic function for extracting the \\code{Details} slot of an object.\n#' \n#' @description A generic function for extracting the \\code{Details} slot of an \\code{AceEstimation} object.\n# ' \n#For examples see https://r-forge.r-project.org/scm/viewvc.php/pkg/lme4/man/lmList-class.Rd?view=markup&revision=2&root=lme4&pathrev=452\n# ' @section Methods\n# '  \\describe{ \n# '   \\item{GetDetails}{\\code{signature(object=\"AceEstimate\")}: Extracts the \\code{Details} slot of an \\code{AceEstimation} object.} \n# '  }   \n#' @author Will Beasley\n#' @keywords methods\nmethods::setMethod(f=\"GetDetails\", \"AceEstimate\", \n  definition=function( object ) {\n    #print(str(object))\n    return( slot(object, \"Details\")[[1]] )\n  }\n)\n\n\n\n\n# setMethod(\"summary\", \"Ace\", function(x, ...) {\n#   cat(\"Results of ACE estimation:\\n\")\n#   #aceDisplay <- matrix(c(\"ASquared\", \"CSquared\", \"ESquared\", slot(x, \"ASquared\"), slot(x, \"CSquared\"), slot(x, \"ESquared\")), byrow=T, nrow=2)\n#   #cat(aceDisplay, \"\\n\")\n#   #print(aceDisplay)\n#   print(c(ASquared=slot(x, \"ASquared\"), CSquared=slot(x, \"CSquared\"), ESquared=slot(x, \"ESquared\"), CaseCount=slot(x,\"CaseCount\")))\n#   print(c(a=33, d=43))\n# })\n\n\n\n\n## ' Generic function for returning the contents from an \\code{AceEstimate}\n## ' class.\n## ' \n## ' Extract the values\n## ' \n## ' \n## ' @name GetEstimate-methods\n## ' @aliases GetEstimate-methods GetEstimate,AceEstimate-method\n## ' @docType methods\n## ' @section Methods: \\describe{\n## ' \n## ' \\item{list(\"signature(object = \\\"AceEstimate\\\")\")}{ %% ~~describe this\n## ' method here~~ } }\n## ' @author Will Beasley\n## ' @keywords methods\n# setGeneric(\"GetEstimate\", function( object ) { standardGeneric(\"GetEstimate\") })\n# setMethod(f=\"GetEstimate\", \"AceEstimate\", \n#           definition=function( object ) {\n#             #print(str(object))\n#             return( c(ASquared=slot(object, \"ASquared\"), CSquared=slot(object, \"CSquared\"), ESquared=slot(object, \"ESquared\")) )\n#           }\n#           )\n",
    "created" : 1359424015721.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1712263366",
    "id" : "D19B5110",
    "lastKnownWriteTime" : 1359424215,
    "path" : "F:/Projects/RDev/NlsyLinksStaging/NlsyLinks/R/AceEstimate.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}